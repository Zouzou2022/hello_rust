所有权的主要目的是为了管理堆数据。

所有权的规则
1.Rust中的每一个值都有一个被称为 所有者 的变量。
2.值在任何时刻都只有一个所有者。
3.当所有者（变量）离开作用域时，这个值将被丢弃。

变量作用域
fn main() {
    {                      // s 在这里无效, 它尚未声明
        let s = "hello";   // 从此处起，s 是有效的

        // 使用 s
    }                      // 此作用域已结束，s 不再有效
}
当s进入作用域时，它是有效的。
这一直持续到它离开作用域为止。
当s离开作用域，Rust为自动为我们调用一个特殊的函数（drop）用来释放内存。

变量的所有权总是遵循相同的模式：将值赋给另一个变量时移动它。当持有堆中数据值的变量离开作用域时，其值将通过 drop 被清理掉，除非数据被移动为另一个变量所有。

对引用的讨论：
    在任意给定时间，要么 只能有一个可变引用，要么 只能有多个不可变引用。
    引用必须总是有效的。



